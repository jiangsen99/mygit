<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd">
    <!--将要创建对象的类配置到配置文件中-->
    <!--
        id属性表示是创建的对象的唯一标识，用于从容器中获取对象
        class属性表示要创建的对象的全限定名
        scope属性表示创建的对象的范围:singleton表示单例(默认)，prototype表示多例

        如果是单例,那么对象什么时候创建?创建核心容器的时候
        如果是多例,那么对象什么时候创建?每次调用getBean方法的时候创建

        对于一个对象而言，是有生命周期的，那么就需要一些生命周期方法来监听生命周期的执行(了解)
        init-method属性:表示绑定对象创建的生命周期方法，我们通常在初始化方法中做一些"读取配置文件等等耗时操作"
        destroy-method属性:表示绑定对象销毁的生命周期方法，我们通常在销毁方法中做一些资源关闭等等操作

        spring核心容器里面的单例对象:
            1. 核心容器创建的时候创建
            2. 核心容器销毁的时候销毁
    -->
    <!--构造函数方式-->
    <!--<bean id="userService" scope="singleton" init-method="initMethod" destroy-method="destroyMethod" class="com.itheima.service.MyUserService"/>
-->

    <!--
        spring核心容器创建bean对象的三种方式:
            1. 无参构造函数的方式创建对象
               id就表示创建的对象的唯一表示，
               class就表示要创建的对象的类的全限定名

            2. 静态工厂方式创建对象,让spring核心容器管理静态工厂创建出来的对象(了解，
               使用场景是:将工具类创建的对象交给spring的核心容器管理)

               id表示创建出来的对象的唯一标识
               class就表示静态工厂的类的全限定名
               factory-method表示静态工厂中创建对象的那个方法

           3. 实例工厂方式创建对象，让spring核心容器管理:实例工厂对象和工厂创建出来的对象(了解)
              1. 使用bean标签，创建实例工厂对象并且交由spring核心容器管理
                 id:实例工厂对象的唯一标识
                 class:实例工厂类的全限定名

              2. 调用实例工厂对象的方法，创建对象
                 id:创建的对象的唯一标识
                 factory-bean:表示要调用哪个工厂对象的方法，就填写哪个工厂对象的id
                 factory-method:表示调用工厂对象的哪个方法
    -->
    <!--静态工厂方式-->
    <!--<bean id="userService" class="com.itheima.factory.StaticFactory" factory-method="createUserService"/>-->

    <!--实例工厂方式-->
    <bean id="instanceFactory" class="com.itheima.factory.InstanceFactory"/>
    <bean id="userService" factory-bean="instanceFactory" factory-method="getUserService"/>
</beans>